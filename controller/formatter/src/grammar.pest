start = _{SOI ~ all ~ EOI}

all = {
    (any_no_text ~ semicolon ~ any_no_text ~ semicolon ~ any_no_text_no_cond ~ semicolon ~ (text | general)?)
    | (any_no_text ~ semicolon ~ any_no_text ~ semicolon ~ any_no_cond)
    | (any_no_text ~ semicolon ~ any)
    | (part_color? ~ part_cond ~ general)
    | any_no_cond
}

semicolon = {";"}

any = {
    part_color? ~ (
        text
        | (part_cond? ~ fraction)
        | (part_cond? ~ number)
        | (part_cond? ~ date_time)
        | (part_cond? ~ general)
        | literal*
    )
}

any_no_text = {
    part_color? ~ part_cond? ~ (
        fraction
        | number
        | date_time
        | general
        | literal*
    )
}

any_no_cond = {
    part_color? ~ (
        text
        | fraction
        | number
        | date_time
        | general
        | literal*
    )
}

any_no_text_no_cond = {
    part_color? ~ (
        fraction
        | number
        | date_time
        | general
        | literal*
    )
}

general = @{intl_numfmt_general}

number = {
    part_num ~ (part_exponential ~ part_num)? ~ intl_char_numgrp_sep* ~ intl_ampm*
}

date_time_token = {
    part_year
    | part_month
    | part_day
    | part_hour
    | part_minute
    | part_second
    | abs_time_token
}

abs_time_token = _{part_abs_hour | part_abs_second | part_abs_minute}

date_time = {
    (intl_ampm | literal)* ~ date_time_token+ ~ (
        date_time_token
        | part_sub_second
        | intl_char_date_sep
        | intl_char_time_sep
        | intl_ampm
        | literal
    )*
}

text = {
    (literal* ~ commercial_at+ ~ (commercial_at | intl_ampm | literal)*)
    | ((commercial_at | intl_ampm | literal)* ~ commercial_at+ ~ literal*)
}

fraction = {
    part_fraction ~ solidus ~ part_fraction ~ part_num? ~ intl_ampm*
}

part_num = {
    (literal* ~ part_num_token2+ ~ (part_num_token2 | percent_sign | literal)*)
    | ((part_num_token2 | percent_sign | literal)* ~ part_num_token2+ ~ literal*)
}

part_exponential = {
    capital_letter_e ~ part_sign
}

part_year = @{
    small_letter_y{2} | small_letter_y{4}
}

part_month = @{
    small_letter_m{1,5}
}

part_day = @{
    small_letter_d{1,4}
}

part_hour = @{
    small_letter_h{1,2}
}

part_abs_hour = @{
    left_square_bracket ~ small_letter_h+ ~ right_square_bracket
}

part_minute = @{
    small_letter_m{1,2}
}

part_abs_minute = @{
    left_square_bracket ~ small_letter_m+ ~ right_square_bracket
}

part_second = @{
    small_letter_s{1,2}
}

part_abs_second = @{
    left_square_bracket ~ small_letter_s+ ~ right_square_bracket
}

part_sub_second = @{
    intl_char_decimal_sep ~ "0"{1,2}
}

part_cond = {
    left_square_bracket ~ part_comp_oper ~ part_cond_num ~ right_square_bracket
}

part_comp_oper = @{
    (less_than_sign ~ (equals_sign | greater_than_sign)?)
    | equals_sign
    | (greater_than_sign ~ equals_sign?)
}

part_locale_id = @{
    left_square_bracket ~ dollar_sign ~ (!("["|"]") ~ utf16_any)+ ~
    (hyphen_minus ~ digit_hexadecimal{1,3})? ~ right_square_bracket
}

part_cond_num = @{
    hyphen_minus? ~ part_int_num ~ (intl_char_decimal_sep ~ part_int_num)? ~
    (part_exponential ~ part_int_num)?
}

part_sign = {
    plus_sign | hyphen_minus
}

part_color = @{
    left_square_bracket ~ (intl_color | (part_str_color ~ part_1_to_56)) ~ right_square_bracket
}

part_1_to_56 = {
    part_number_1_to_9
    | (part_number_1_to_4 ~ ASCII_DIGIT)
    | ("5" ~ ("0" | part_number_1_to_6))
}

part_int_num = @{
    ASCII_DIGIT+
}

part_num_token1 = _{
    number_sign | question_mark | digit_zero
}

part_num_token2 = _{
    part_num_token1 | intl_char_decimal_sep | intl_char_numgrp_sep
}

part_fraction = {
    literal* ~ (
        (part_int_num+ ~ (part_int_num | percent_sign | literal)*)
        | ((part_int_num | percent_sign | literal)* ~ part_int_num+)
        | (part_num_token1+ ~ (part_num_token1 | percent_sign | literal)*)
        | ((part_num_token1 | percent_sign | literal)* ~ part_num_token1+)
    ) ~ literal*
}

part_number_1_to_4 = {
    "1" | "2" | "3" | "4"
}

part_number_1_to_6 = {
    part_number_1_to_4 | "5" | "6"
}

part_number_1_to_9 = {
    part_number_1_to_6 | "7" | "8" | "9"
}

part_str_color = {
    "Color"
}

literal_char = @{
    reverser_solidus ~ utf16_any
}

literal_char_special = @{
    "$"
    | "-"
    | "+"
    // | "/"
    | "("
    | ")"
    // | ":"
    | "!"
    | "^"
    | "&"
    | "'"
    | "~"
    | "{"
    | "}"
    | "<"
    | ">"
    | "="
    | " "
    | "`"
    | "|"
    | "￥"
    | "¥"
}

literal_char_repeat = @{
    asterisk ~ utf16_any
}

literal_string = @{
    (quotation_mark ~ utf16_any_without_quote+ ~ quotation_mark)
}

utf16_any_without_quote = {
    !"\"" ~ utf16_any
}

literal_char_space = @{
    low_line ~ utf16_any
}

intl_char_decimal_sep = @{full_stop}

intl_char_numgrp_sep = @{comma}

intl_char_date_sep = @{solidus}

intl_char_time_sep = @{colon}

intl_color = {
    "Black" | "黑色"
    | "Blue" | "蓝色"
    | "Cyan" | "蓝绿色"
    | "Green" | "绿色"
    | "Magenta" | "洋红"
    | "Red" | "红色"
    | "White" | "白色"
    | "Yellow" | "黄色"
}

intl_numfmt_general = {
    "General" | "G/通用格式"
}

intl_ampm = @{
    "AM/PM" | "A/P" | "上午/下午"
}

utf16_any = {
    '\u{0000}'..'\u{FFFF}'
}

digit_zero = {"0"}

quotation_mark = {"\""}

number_sign = {"#"}

dollar_sign = {"$"}

percent_sign = {"%"}

asterisk = {"*"}

plus_sign = {"+"}

comma = {","}

hyphen_minus = {"-"}

full_stop = {"."}

solidus = {"/"}

colon = {":"}

less_than_sign = {"<"}

equals_sign = {"="}

greater_than_sign = {">"}

question_mark = {"?"}

commercial_at = {"@"}

capital_letter_e = {"E"}

small_letter_y = {"y"}

small_letter_m = {"m"}

small_letter_d = {"d"}

small_letter_h = {"h"}

small_letter_s = {"s"}

left_square_bracket = {"["}

reverser_solidus= {"\\"}

right_square_bracket = {"]"}

low_line = {"_"}

digit_hexadecimal = {
    ASCII_DIGIT
    |'A'..'F'
    | 'a'..'f'
}

literal = {
    literal_string
    | literal_char
    | literal_char_special
    | literal_char_repeat
    | literal_char_space
    // TODO
    | part_locale_id
}
